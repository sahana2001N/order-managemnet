{"ast":null,"code":"var _jsxFileName = \"C:\\\\login\\\\reactjs\\\\ibm-final-demos-may-2024-main\\\\03-ibm-frontend-react\\\\src\\\\components\\\\admin\\\\adminLogin.js\",\n  _s = $RefreshSig$();\n// import { useState } from \"react\";\n// import { Link, useNavigate } from \"react-router-dom\";\n// //import AdminService from \"../../services/AdminService\";\n// import { adminLogin } from \"../../redux/adminSlice\";\n\n// import { useDispatch } from \"react-redux\";\n\n// const AdminLogin = () => {\n\n//     const [loginData, setLoginData] = useState({ username: '', password: '' });\n//     const [afterSubmit, setAfterSubmit] = useState('');\n//     const navigate = useNavigate();\n//     const dispatch = useDispatch();\n\n//     const handleChange = (evt) => {\n//         console.log(evt.target.name);\n//         console.log(evt.target.value);\n//         setLoginData({\n//             ...loginData,\n//             [evt.target.name]: evt.target.value\n//         });\n//     };\n\n//     // const handleLoginSubmit = (evt) => {\n//     //     evt.preventDefault();\n//     //     console.log(loginData);\n//     //     AdminService.loginAdmin(loginData)\n//     //         .then((response) => {\n//     //             console.log(response);\n//     //             setAfterSubmit(`Hi ${loginData.username}! You've logged in successfully!`);\n//     //             setTimeout(() => {\n//     //                 setLoginData({ username: '', password: '' });\n//     //                 dispatch(adminLogin(response));\n//     //                 navigate('/profile');\n//     //             }, 2000);\n//     //         })\n//     //         .catch((error) => {\n//     //             console.log(error);\n//     //             setLoginData({ username: '', password: '' });\n//     //             setAfterSubmit(`Invalid credentials!`);\n//     //         });\n//     // };\n\n//     const handleLoginSubmit = (evt) => {\n//         evt.preventDefault();\n//         console.log(loginData);\n\n//         // Check if the username and password match the hardcoded values\n//         if (loginData.username === 'admin' && loginData.password === 'admin') {\n//             // If match, log in successfully\n//             setAfterSubmit(`Hi ${loginData.username}! You've logged in successfully!`);\n//             setTimeout(() => {\n//                 setLoginData({ username: '', password: '' });\n//                 // Dispatch action for admin login (assuming this is defined elsewhere)\n//                 dispatch(adminLogin(/* pass any necessary data here */));\n//                 navigate('/home');\n//             }, 2000);\n//         } else {\n//             // If not match, show invalid credentials message\n//             setLoginData({ username: '', password: '' });\n//             setAfterSubmit(`Invalid credentials!`);\n//         }\n//     };\n\n//     return (\n//         <>\n\n//             {/* <h1>Login Component</h1>\n//             <p>Login here</p>\n//             <form onSubmit={handleLoginSubmit}>\n//                 <input type=\"text\" name=\"username\" value={loginData.username}\n//                     onChange={handleChange} autoFocus required />\n//                 <br />\n//                 <input type=\"password\" name=\"password\" value={loginData.password}\n//                     onChange={handleChange} required />\n//                 <br />\n//                 <input type=\"submit\" value=\"Login\" />\n//             </form>\n//             {afterSubmit && <p>{afterSubmit}</p>}\n//             <p>Not yet registered? <Link to={'/register'}>Register</Link> </p> */}\n\n// <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '60vh' }}>\n// <div style={{ width: '300px', padding: '20px', border: '1px solid #ccc', borderRadius: '5px', backgroundColor: '#fff' }}>\n//     <h2 style={{ textAlign: 'center', marginBottom: '10px' }}>Login</h2>\n//   <form onSubmit={handleLoginSubmit}>\n// <div className=\"mb-3\">\n//     <label className=\"form-label\">Username</label>\n//     <input type=\"text\" className=\"form-control\" name=\"username\" value={loginData.username}\n//                     onChange={handleChange} autoFocus required />\n//    </div>\n//   <div className=\"mb-3\">\n//     <label className=\"form-label\">Password</label>\n//     <input type=\"password\" className=\"form-control\" name=\"password\" value={loginData.password}\n//                     onChange={handleChange} required />\n//    </div>\n\n//   <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n\n//   {/*\n//   {afterSubmit && <p>{afterSubmit}</p>}\n// <p>Not yet registered? <Link to={'/product'}>Register</Link> </p>\n//         */}\n\n// {afterSubmit && <p>{afterSubmit}</p>}\n// <p>Not yet registered? <Link to={'/register'}>Register</Link> </p>\n\n//   </form>\n//   </div>\n//   </div>\n\n//         </>\n//     );\n// };\n\n// export default AdminLogin;\n\nimport { useState } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { adminLogin } from \"../../redux/adminSlice\";\nimport { useDispatch } from \"react-redux\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AdminLogin = () => {\n  _s();\n  const [loginData, setLoginData] = useState({\n    username: '',\n    password: ''\n  });\n  const [afterSubmit, setAfterSubmit] = useState('');\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const handleChange = evt => {\n    setLoginData({\n      ...loginData,\n      [evt.target.name]: evt.target.value\n    });\n  };\n  const handleLoginSubmit = evt => {\n    evt.preventDefault();\n\n    // Check if the username and password match the hardcoded values\n    if (loginData.username === 'admin' && loginData.password === 'admin') {\n      // If match, log in successfully\n      setAfterSubmit(`Hi ${loginData.username}! You've logged in successfully!`);\n      setTimeout(() => {\n        setLoginData({\n          username: '',\n          password: ''\n        });\n        // Dispatch action for admin login with user data\n        dispatch(adminLogin({\n          user: loginData.username\n        })); // Pass username as user data\n        navigate('/');\n      }, 2000);\n    } else {\n      // If not match, show invalid credentials message\n      setLoginData({\n        username: '',\n        password: ''\n      });\n      setAfterSubmit(`Invalid credentials!`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        minHeight: '60vh'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '300px',\n          padding: '20px',\n          border: '1px solid #ccc',\n          borderRadius: '5px',\n          backgroundColor: '#fff'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          style: {\n            textAlign: 'center',\n            marginBottom: '10px'\n          },\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleLoginSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"form-label\",\n              children: \"Username\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              className: \"form-control\",\n              name: \"username\",\n              value: loginData.username,\n              onChange: handleChange,\n              autoFocus: true,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"form-label\",\n              children: \"Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"password\",\n              className: \"form-control\",\n              name: \"password\",\n              value: loginData.password,\n              onChange: handleChange,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"btn btn-primary\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(AdminLogin, \"uFjSD2rvL3AIE1YO/k9d7X4r0dk=\", false, function () {\n  return [useNavigate, useDispatch];\n});\n_c = AdminLogin;\nexport default AdminLogin;\nvar _c;\n$RefreshReg$(_c, \"AdminLogin\");","map":{"version":3,"names":["useState","Link","useNavigate","adminLogin","useDispatch","jsxDEV","_jsxDEV","Fragment","_Fragment","AdminLogin","_s","loginData","setLoginData","username","password","afterSubmit","setAfterSubmit","navigate","dispatch","handleChange","evt","target","name","value","handleLoginSubmit","preventDefault","setTimeout","user","children","style","display","justifyContent","alignItems","minHeight","width","padding","border","borderRadius","backgroundColor","textAlign","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","className","type","onChange","autoFocus","required","_c","$RefreshReg$"],"sources":["C:/login/reactjs/ibm-final-demos-may-2024-main/03-ibm-frontend-react/src/components/admin/adminLogin.js"],"sourcesContent":["// import { useState } from \"react\";\r\n// import { Link, useNavigate } from \"react-router-dom\";\r\n// //import AdminService from \"../../services/AdminService\";\r\n// import { adminLogin } from \"../../redux/adminSlice\";\r\n\r\n// import { useDispatch } from \"react-redux\";\r\n\r\n\r\n// const AdminLogin = () => {\r\n\r\n//     const [loginData, setLoginData] = useState({ username: '', password: '' });\r\n//     const [afterSubmit, setAfterSubmit] = useState('');\r\n//     const navigate = useNavigate();\r\n//     const dispatch = useDispatch();\r\n\r\n//     const handleChange = (evt) => {\r\n//         console.log(evt.target.name);\r\n//         console.log(evt.target.value);\r\n//         setLoginData({\r\n//             ...loginData,\r\n//             [evt.target.name]: evt.target.value\r\n//         });\r\n//     };\r\n\r\n//     // const handleLoginSubmit = (evt) => {\r\n//     //     evt.preventDefault();\r\n//     //     console.log(loginData);\r\n//     //     AdminService.loginAdmin(loginData)\r\n//     //         .then((response) => {\r\n//     //             console.log(response);\r\n//     //             setAfterSubmit(`Hi ${loginData.username}! You've logged in successfully!`);\r\n//     //             setTimeout(() => {\r\n//     //                 setLoginData({ username: '', password: '' });\r\n//     //                 dispatch(adminLogin(response));\r\n//     //                 navigate('/profile');\r\n//     //             }, 2000);\r\n//     //         })\r\n//     //         .catch((error) => {\r\n//     //             console.log(error);\r\n//     //             setLoginData({ username: '', password: '' });\r\n//     //             setAfterSubmit(`Invalid credentials!`);\r\n//     //         });\r\n//     // };\r\n\r\n\r\n//     const handleLoginSubmit = (evt) => {\r\n//         evt.preventDefault();\r\n//         console.log(loginData);\r\n    \r\n//         // Check if the username and password match the hardcoded values\r\n//         if (loginData.username === 'admin' && loginData.password === 'admin') {\r\n//             // If match, log in successfully\r\n//             setAfterSubmit(`Hi ${loginData.username}! You've logged in successfully!`);\r\n//             setTimeout(() => {\r\n//                 setLoginData({ username: '', password: '' });\r\n//                 // Dispatch action for admin login (assuming this is defined elsewhere)\r\n//                 dispatch(adminLogin(/* pass any necessary data here */));\r\n//                 navigate('/home');\r\n//             }, 2000);\r\n//         } else {\r\n//             // If not match, show invalid credentials message\r\n//             setLoginData({ username: '', password: '' });\r\n//             setAfterSubmit(`Invalid credentials!`);\r\n//         }\r\n//     };\r\n    \r\n//     return (\r\n//         <>\r\n\r\n//             {/* <h1>Login Component</h1>\r\n//             <p>Login here</p>\r\n//             <form onSubmit={handleLoginSubmit}>\r\n//                 <input type=\"text\" name=\"username\" value={loginData.username}\r\n//                     onChange={handleChange} autoFocus required />\r\n//                 <br />\r\n//                 <input type=\"password\" name=\"password\" value={loginData.password}\r\n//                     onChange={handleChange} required />\r\n//                 <br />\r\n//                 <input type=\"submit\" value=\"Login\" />\r\n//             </form>\r\n//             {afterSubmit && <p>{afterSubmit}</p>}\r\n//             <p>Not yet registered? <Link to={'/register'}>Register</Link> </p> */}\r\n\r\n// <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '60vh' }}>\r\n// <div style={{ width: '300px', padding: '20px', border: '1px solid #ccc', borderRadius: '5px', backgroundColor: '#fff' }}>\r\n//     <h2 style={{ textAlign: 'center', marginBottom: '10px' }}>Login</h2>\r\n//   <form onSubmit={handleLoginSubmit}>\r\n// <div className=\"mb-3\">\r\n//     <label className=\"form-label\">Username</label>\r\n//     <input type=\"text\" className=\"form-control\" name=\"username\" value={loginData.username}\r\n//                     onChange={handleChange} autoFocus required />\r\n//    </div>\r\n//   <div className=\"mb-3\">\r\n//     <label className=\"form-label\">Password</label>\r\n//     <input type=\"password\" className=\"form-control\" name=\"password\" value={loginData.password}\r\n//                     onChange={handleChange} required />\r\n//    </div>\r\n  \r\n//   <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n\r\n//   {/*\r\n//   {afterSubmit && <p>{afterSubmit}</p>}\r\n// <p>Not yet registered? <Link to={'/product'}>Register</Link> </p>\r\n//         */}\r\n\r\n// {afterSubmit && <p>{afterSubmit}</p>}\r\n// <p>Not yet registered? <Link to={'/register'}>Register</Link> </p>\r\n  \r\n//   </form>\r\n//   </div>\r\n//   </div>\r\n\r\n\r\n\r\n//         </>\r\n//     );\r\n// };\r\n\r\n// export default AdminLogin;\r\n\r\n\r\nimport { useState } from \"react\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { adminLogin } from \"../../redux/adminSlice\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nconst AdminLogin = () => {\r\n    const [loginData, setLoginData] = useState({ username: '', password: '' });\r\n    const [afterSubmit, setAfterSubmit] = useState('');\r\n    const navigate = useNavigate();\r\n    const dispatch = useDispatch();\r\n\r\n    const handleChange = (evt) => {\r\n        setLoginData({\r\n            ...loginData,\r\n            [evt.target.name]: evt.target.value\r\n        });\r\n    };\r\n\r\n    const handleLoginSubmit = (evt) => {\r\n        evt.preventDefault();\r\n    \r\n        // Check if the username and password match the hardcoded values\r\n        if (loginData.username === 'admin' && loginData.password === 'admin') {\r\n            // If match, log in successfully\r\n            setAfterSubmit(`Hi ${loginData.username}! You've logged in successfully!`);\r\n            setTimeout(() => {\r\n                setLoginData({ username: '', password: '' });\r\n                // Dispatch action for admin login with user data\r\n                dispatch(adminLogin({ user: loginData.username })); // Pass username as user data\r\n                navigate('/');\r\n            }, 2000);\r\n        } else {\r\n            // If not match, show invalid credentials message\r\n            setLoginData({ username: '', password: '' });\r\n            setAfterSubmit(`Invalid credentials!`);\r\n        }\r\n    };\r\n    \r\n    return (\r\n        <>\r\n            <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '60vh' }}>\r\n                <div style={{ width: '300px', padding: '20px', border: '1px solid #ccc', borderRadius: '5px', backgroundColor: '#fff' }}>\r\n                    <h2 style={{ textAlign: 'center', marginBottom: '10px' }}>Login</h2>\r\n                    <form onSubmit={handleLoginSubmit}>\r\n                        <div className=\"mb-3\">\r\n                            <label className=\"form-label\">Username</label>\r\n                            <input type=\"text\" className=\"form-control\" name=\"username\" value={loginData.username}\r\n                                onChange={handleChange} autoFocus required />\r\n                        </div>\r\n                        <div className=\"mb-3\">\r\n                            <label className=\"form-label\">Password</label>\r\n                            <input type=\"password\" className=\"form-control\" name=\"password\" value={loginData.password}\r\n                                onChange={handleChange} required />\r\n                        </div>\r\n                        <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n                        \r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AdminLogin;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}