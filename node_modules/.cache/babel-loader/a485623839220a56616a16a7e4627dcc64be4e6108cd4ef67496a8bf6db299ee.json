{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconsole.log('cartSlice');\nconst initialState = {\n  items: [],\n  totalQuantity: 0\n};\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    // more methods \n\n    addItem(state, action) {\n      const newItem = action.payload;\n      state.items.push({\n        ...newItem,\n        quantity: 1\n      });\n      state.totalQuantity++;\n    }\n  }\n});\nexport default cartSlice.reducer;\nexport const {\n  addItem,\n  updateQuantity\n} = cartSlice.actions;","map":{"version":3,"names":["createSlice","console","log","initialState","items","totalQuantity","cartSlice","name","reducers","addItem","state","action","newItem","payload","push","quantity","reducer","updateQuantity","actions"],"sources":["C:/Varshini/OrderManagement/Frontend/order-managemnet/src/redux/cartSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nconsole.log('cartSlice');\r\n\r\nconst initialState = {\r\n    items: [],\r\n    totalQuantity: 0,\r\n};\r\n\r\nconst cartSlice = createSlice({\r\n    name: 'cart',\r\n    initialState ,\r\n    reducers : { // more methods \r\n       \r\n        addItem(state, action) {\r\n            const newItem = action.payload;\r\n              state.items.push({ ...newItem, quantity: 1 });\r\n          \r\n            state.totalQuantity++;\r\n          },\r\n          \r\n      \r\n    }\r\n});\r\nexport default cartSlice.reducer;\r\n\r\nexport const {addItem,updateQuantity} = cartSlice.actions;"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9CC,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;AAExB,MAAMC,YAAY,GAAG;EACjBC,KAAK,EAAE,EAAE;EACTC,aAAa,EAAE;AACnB,CAAC;AAED,MAAMC,SAAS,GAAGN,WAAW,CAAC;EAC1BO,IAAI,EAAE,MAAM;EACZJ,YAAY;EACZK,QAAQ,EAAG;IAAE;;IAETC,OAAOA,CAACC,KAAK,EAAEC,MAAM,EAAE;MACnB,MAAMC,OAAO,GAAGD,MAAM,CAACE,OAAO;MAC5BH,KAAK,CAACN,KAAK,CAACU,IAAI,CAAC;QAAE,GAAGF,OAAO;QAAEG,QAAQ,EAAE;MAAE,CAAC,CAAC;MAE/CL,KAAK,CAACL,aAAa,EAAE;IACvB;EAGN;AACJ,CAAC,CAAC;AACF,eAAeC,SAAS,CAACU,OAAO;AAEhC,OAAO,MAAM;EAACP,OAAO;EAACQ;AAAc,CAAC,GAAGX,SAAS,CAACY,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}